#=========================================================================
# step test
#=========================================================================

from pymtl3             import *
from pymtl3.passes.backends.verilog import \
    VerilatorImportConfigs, TranslationConfigs
from pymtl3.stdlib.test import run_test_vector_sim, config_model
#need to change the name of the module
#from lab1_imul.IntMulVarLatCalcShamtRTL import IntMulVarLatCalcShamtRTL
from final_project.matrix_operaRTL import matrix_operaVRTL
import random
#-------------------------------------------------------------------------
# test_basic
#-------------------------------------------------------------------------

def test_basic( dump_vcd, test_verilog ):
    #dut = IntMulVarLatCalcShamtRTL()     #need to change the name
    dut = matrix_operaVRTL()

    config_model( dut, dump_vcd, test_verilog )

    run_test_vector_sim( dut, [
                               #('req_msg_a      req_msg_b    presum       resp_msg*   a_shift*'),
                               ('req_go   in_x[0]  in_x[1] in_x[2] in_x[3] in_x[4] in_x[5] in_x[6] in_x[7] in_x[8] in_y[0] in_y[1] in_y[2] in_y[3] in_y[4] in_y[5] in_y[6] in_y[7] in_y[8] in_t[0] in_t[1] in_t[2] in_t[3] in_t[4] in_t[5] in_t[6] in_t[7] in_t[8] vx* vy* de* result_ok*'),
                               [b1(1),       b32(2),       b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),  b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(0),     b32(0),      b32(0),     b32(0)],
                               [b1(1),       b32(2),       b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),  b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(0),     b32(0),      b32(0),     b32(0)],
                               [b1(1),       b32(2),       b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),  b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(0),     b32(0),      b32(0),     b32(0)],
                               [b1(1),       b32(2),       b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),  b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(0),     b32(0),      b32(0),     b32(0)],
                               [b1(1),       b32(2),       b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),  b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(0),     b32(0),      b32(0),     b32(0)],
                               [b1(1),       b32(2),       b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),  b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(0),     b32(0),      b32(0),     b32(0)],
                               [b1(1),       b32(2),       b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),  b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(0),     b32(0),      b32(0),     b32(0)],
                               [b1(0),       b32(2),       b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),  b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(0),     b32(0),      b32(0),     b32(0)],
                               [b1(0),       b32(2),       b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),  b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(0),     b32(0),      b32(0),     b32(0)],
                               [b1(0),       b32(2),       b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),  b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(0),     b32(0),      b32(0),     b32(0)],
                               [b1(0),       b32(2),       b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),  b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(0),     b32(0),      b32(0),     b32(0)],
                               [b1(0),       b32(2),       b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),  b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(0),     b32(0),      b32(0),     b32(0)],
                               [b1(0),       b32(2),       b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),  b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(0),     b32(0),      b32(0),     b32(1)],
                               [b1(0),       b32(2),       b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),  b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(0),     b32(0),      b32(0),     b32(0)],
                               
                               ] )

def test_large( dump_vcd, test_verilog ):
    #dut = IntMulVarLatCalcShamtRTL()     #need to change the name
    dut = matrix_operaVRTL()

    config_model( dut, dump_vcd, test_verilog )

    run_test_vector_sim( dut, [
                               #('req_msg_a      req_msg_b    presum       resp_msg*   a_shift*'),
                               ('req_go      in_x[0]       in_x[1]     in_x[2]     in_x[3]     in_x[4]     in_x[5]     in_x[6]     in_x[7]     in_x[8]     in_y[0]     in_y[1]  in_y[2]     in_y[3]     in_y[4]     in_y[5]     in_y[6]     in_y[7]     in_y[8]     in_t[0]     in_t[1]     in_t[2]     in_t[3]     in_t[4]     in_t[5]     in_t[6]     in_t[7]     in_t[8]     vx*         vy*          de*         result_ok*'),
                               [b1(1),       b32(6),       b32(2),     b32(3),     b32(4),     b32(9),     b32(5),     b32(5),     b32(5),     b32(3),     b32(6),     b32(3),  b32(6),     b32(6),     b32(0),     b32(2),     b32(4),     b32(4),     b32(5),     b32(3),     b32(9),     b32(6),     b32(0),     b32(0),     b32(5),     b32(5),     b32(7),     b32(5),     b32(0),     b32(0),      b32(0),     b32(0)],
                               [b1(1),       b32(6),       b32(2),     b32(3),     b32(4),     b32(9),     b32(5),     b32(5),     b32(5),     b32(3),     b32(6),     b32(3),  b32(6),     b32(6),     b32(0),     b32(2),     b32(4),     b32(4),     b32(5),     b32(3),     b32(9),     b32(6),     b32(0),     b32(0),     b32(5),     b32(5),     b32(7),     b32(5),     b32(0),     b32(0),      b32(0),     b32(0)],
                               [b1(1),       b32(6),       b32(2),     b32(3),     b32(4),     b32(9),     b32(5),     b32(5),     b32(5),     b32(3),     b32(6),     b32(3),  b32(6),     b32(6),     b32(0),     b32(2),     b32(4),     b32(4),     b32(5),     b32(3),     b32(9),     b32(6),     b32(0),     b32(0),     b32(5),     b32(5),     b32(7),     b32(5),     b32(0),     b32(0),      b32(0),     b32(0)],
                               [b1(1),       b32(6),       b32(2),     b32(3),     b32(4),     b32(9),     b32(5),     b32(5),     b32(5),     b32(3),     b32(6),     b32(3),  b32(6),     b32(6),     b32(0),     b32(2),     b32(4),     b32(4),     b32(5),     b32(3),     b32(9),     b32(6),     b32(0),     b32(0),     b32(5),     b32(5),     b32(7),     b32(5),     b32(0),     b32(0),      b32(0),     b32(0)],
                               [b1(1),       b32(6),       b32(2),     b32(3),     b32(4),     b32(9),     b32(5),     b32(5),     b32(5),     b32(3),     b32(6),     b32(3),  b32(6),     b32(6),     b32(0),     b32(2),     b32(4),     b32(4),     b32(5),     b32(3),     b32(9),     b32(6),     b32(0),     b32(0),     b32(5),     b32(5),     b32(7),     b32(5),     b32(0),     b32(0),      b32(0),     b32(0)],
                               [b1(1),       b32(6),       b32(2),     b32(3),     b32(4),     b32(9),     b32(5),     b32(5),     b32(5),     b32(3),     b32(6),     b32(3),  b32(6),     b32(6),     b32(0),     b32(2),     b32(4),     b32(4),     b32(5),     b32(3),     b32(9),     b32(6),     b32(0),     b32(0),     b32(5),     b32(5),     b32(7),     b32(5),     b32(0),     b32(0),      b32(0),     b32(0)],
                               [b1(1),       b32(6),       b32(2),     b32(3),     b32(4),     b32(9),     b32(5),     b32(5),     b32(5),     b32(3),     b32(6),     b32(3),  b32(6),     b32(6),     b32(0),     b32(2),     b32(4),     b32(4),     b32(5),     b32(3),     b32(9),     b32(6),     b32(0),     b32(0),     b32(5),     b32(5),     b32(7),     b32(5),     b32(0),     b32(0),      b32(0),     b32(0)],
                               [b1(1),       b32(6),       b32(2),     b32(3),     b32(4),     b32(9),     b32(5),     b32(5),     b32(5),     b32(3),     b32(6),     b32(3),  b32(6),     b32(6),     b32(0),     b32(2),     b32(4),     b32(4),     b32(5),     b32(3),     b32(9),     b32(6),     b32(0),     b32(0),     b32(5),     b32(5),     b32(7),     b32(5),     b32(0),     b32(0),      b32(0),     b32(0)],
                               [b1(1),       b32(6),       b32(2),     b32(3),     b32(4),     b32(9),     b32(5),     b32(5),     b32(5),     b32(3),     b32(6),     b32(3),  b32(6),     b32(6),     b32(0),     b32(2),     b32(4),     b32(4),     b32(5),     b32(3),     b32(9),     b32(6),     b32(0),     b32(0),     b32(5),     b32(5),     b32(7),     b32(5),     b32(0),     b32(0),      b32(0),     b32(0)],
                               [b1(1),       b32(6),       b32(2),     b32(3),     b32(4),     b32(9),     b32(5),     b32(5),     b32(5),     b32(3),     b32(6),     b32(3),  b32(6),     b32(6),     b32(0),     b32(2),     b32(4),     b32(4),     b32(5),     b32(3),     b32(9),     b32(6),     b32(0),     b32(0),     b32(5),     b32(5),     b32(7),     b32(5),     b32(0),     b32(0),      b32(0),     b32(0)],
                               [b1(1),       b32(6),       b32(2),     b32(3),     b32(4),     b32(9),     b32(5),     b32(5),     b32(5),     b32(3),     b32(6),     b32(3),  b32(6),     b32(6),     b32(0),     b32(2),     b32(4),     b32(4),     b32(5),     b32(3),     b32(9),     b32(6),     b32(0),     b32(0),     b32(5),     b32(5),     b32(7),     b32(5),     b32(0),     b32(0),      b32(0),     b32(0)],
                               [b1(1),       b32(6),       b32(2),     b32(3),     b32(4),     b32(9),     b32(5),     b32(5),     b32(5),     b32(3),     b32(6),     b32(3),  b32(6),     b32(6),     b32(0),     b32(2),     b32(4),     b32(4),     b32(5),     b32(3),     b32(9),     b32(6),     b32(0),     b32(0),     b32(5),     b32(5),     b32(7),     b32(5),     b32(0),     b32(0),      b32(0),     b32(0)],
                               [b1(0),       b32(2),       b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),  b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(0),     b32(-19),    b32(19),     b32(1)],
                               [b1(0),       b32(2),       b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),  b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(1),     b32(0),     b32(-19),      b32(19),     b32(0)],
                               
                               ] )


#def test_large_pos( dump_vcd, test_verilog ):
#  #dut = IntMulVarLatCalcShamtRTL()      #need to change the name
#  dut = step()

#  config_model( dut, dump_vcd, test_verilog )

# run_test_vector_sim( dut, [
#    ('req_msg_a      req_msg_b    presum       resp_msg*   a_shift*'),
# [ 0x7fff0000,      0,         0x00000000,  0x00000000,  0xfffe0000     ],
# [ 0x7fff0001,      0,         0x00000011,  0x00000011,  0xfffe0002     ],
# [ 0x7fff0000,      1,         0x00001000,  0x7fff1000,  0xfffe0000     ],
# [ 0x4dff1000,      1,         0x00001100,  0x4dff2100,  0x9bfe2000     ],
#  ] )
#def Ixcal(image_in,image_out,size):
#  for i in range (0,size):
#    for j in range(0,size):
#      image_out.append(image_in[j+i*(size+2)+2]-image_in[j+(size+2)*i])
#  return

#image_in=[0,1,7,3,0,5,6,7,8,8,4,2,9,6,3]
#image_out=[]
#Ixcal(image_in,image_out,3)
#for i in image_out:
#  print(i)
